# Generated by Django 2.2.1 on 2019-05-03 10:35

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('sessions', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Criterion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('criterion', models.CharField(max_length=50, verbose_name='criterion')),
                ('order', models.IntegerField(verbose_name='order')),
                ('info_heading', models.CharField(max_length=50, verbose_name='info heading')),
                ('info_text', models.TextField(verbose_name='info text')),
            ],
            options={
                'verbose_name': 'criterion',
                'verbose_name_plural': 'criteria',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='Factor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('factor', models.CharField(max_length=50, verbose_name='factor')),
                ('order', models.IntegerField(verbose_name='order')),
                ('info_heading', models.CharField(max_length=50, verbose_name='info heading')),
                ('info_text', models.TextField(verbose_name='info text')),
                ('is_meta_factor', models.BooleanField(verbose_name='This is a meta factor')),
                ('meta_criterion', models.ManyToManyField(blank=True, related_name='factors', to='comp.Criterion')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='Note',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('note', models.TextField(verbose_name='note')),
            ],
            options={
                'ordering': ['note'],
            },
        ),
        migrations.CreateModel(
            name='TechGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='name')),
                ('order', models.IntegerField(verbose_name='order')),
            ],
            options={
                'verbose_name': 'technology group',
                'verbose_name_plural': 'technology groups',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='Technology',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='name')),
                ('description', models.TextField(verbose_name='description')),
                ('image', models.CharField(help_text='Enter the url of the icon image', max_length=100, verbose_name='icon image')),
                ('url', models.URLField(blank=True, help_text='Enter the url to the corresponding Akvopedia entry, beginning with http://.')),
                ('order', models.IntegerField(null=True)),
                ('factors', models.ManyToManyField(blank=True, to='comp.Factor', verbose_name='factors')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='comp.TechGroup', verbose_name='technology group')),
                ('linked_techs', models.ManyToManyField(blank=True, related_name='_technology_linked_techs_+', to='comp.Technology')),
                ('output', models.ManyToManyField(blank=True, related_name='input', to='comp.Technology')),
            ],
            options={
                'verbose_name': 'technology',
                'verbose_name_plural': 'technologies',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='TechChoice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.IntegerField(null=True)),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sessions.Session', verbose_name='session')),
                ('technology', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='tech_choices', to='comp.Technology', verbose_name='technology')),
            ],
            options={
                'verbose_name': 'technology choice',
                'verbose_name_plural': 'technology choices',
            },
        ),
        migrations.CreateModel(
            name='Relevancy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('applicability', models.CharField(choices=[('A', 'Not applicable'), ('Y', 'Yes'), ('N', 'No'), ('M', 'Maybe')], default='A', max_length=1, verbose_name='applicability')),
                ('criterion', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='relevancies', to='comp.Criterion', verbose_name='criterion')),
                ('note', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='comp.Note', verbose_name='note')),
                ('technology', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='relevancies', to='comp.Technology', verbose_name='technology')),
            ],
            options={
                'verbose_name': 'Appropriatness',
                'verbose_name_plural': 'Appropriatnesses',
            },
        ),
        migrations.AddField(
            model_name='criterion',
            name='factor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='criteria', to='comp.Factor', verbose_name='factor'),
        ),
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('applicable', models.BooleanField(verbose_name='applicable')),
                ('criterion', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='comp.Criterion', verbose_name='criterion')),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sessions.Session', verbose_name='session')),
            ],
            options={
                'verbose_name': 'answer',
                'verbose_name_plural': 'answers',
            },
        ),
    ]
